package telegram

import (
	"fmt"
	"log"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (h *Handler) handleMessage(update tgbotapi.Update) {
	msg := update.Message
	chatID := msg.Chat.ID
	text := msg.Text

	if msg == nil {
		return
	}

	log.Printf("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s –æ—Ç %d", text, msg.From.ID) // –î–æ–±–∞–≤–∏–ª–∏ –ª–æ–≥

	if h.IsAdmin(msg.From.ID) {
		log.Println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º") // –õ–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
		if strings.HasPrefix(text, "/add_key ") {
			log.Println("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /add_key") // –õ–æ–≥ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º
			h.handleAddKeyCommand(chatID, text)
			return
		}
	}

	switch text {
	case "/start", "–ö—É–ø–∏—Ç—å VPN", "–ú–æ–∏ –∫–ª—é—á–∏", "–ü—Ä–æ–¥–ª–∏—Ç—å –∫–ª—é—á", "–°—Ç–∞—Ç—É—Å –∫–ª—é—á–∞":
		h.handleUserCommand(chatID, text, int(msg.From.ID), msg.From.UserName)

	default:
		log.Println("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")
		h.sendMessageText(chatID, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	}
}

func (h *Handler) handleUserCommand(chatID int64, text string, userID int, username string) {
	switch text {
	case "/start":
		err := h.userService.RegisterUser(
			int64(userID),
			username,
			fmt.Sprintf("t.me/%s", username),
		)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
		}

		h.sendMessageText(chatID, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
		h.sendMenuKeyboard(chatID)

	case "–ö—É–ø–∏—Ç—å VPN":
		h.processBuyVPN(chatID, userID)

	case "–ú–æ–∏ –∫–ª—é—á–∏":
		h.processMyKeys(chatID, userID)

	case "–ü—Ä–æ–¥–ª–∏—Ç—å –∫–ª—é—á":
		h.processRenewKey(chatID, userID)

	case "–°—Ç–∞—Ç—É—Å –∫–ª—é—á–∞":
		h.processKeyStatus(chatID, userID)
	}
}

func (h *Handler) processBuyVPN(chatID int64, userID int) {
	user, err := h.userService.GetUserByTelegramID(int64(userID))
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
		h.sendErrorMessage(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	hasKeys, err := h.vpnKeyService.HasFreeKeys()
	if err != nil || !hasKeys {
		h.sendErrorMessage(chatID, "‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö VPN-–∫–ª—é—á–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	paymentURL, err := h.paymentService.CreatePayment(user.ID, 299, "–ü–æ–∫—É–ø–∫–∞ VPN")
	if err != nil {
		h.sendErrorMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	h.sendMessageText(chatID, fmt.Sprintf("üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: %s", paymentURL))
}

func (h *Handler) processMyKeys(chatID int64, userID int) {
	keys, err := h.vpnKeyService.GetKeysByUserTelegramID(int64(userID))
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
		h.sendErrorMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–µ–π.")
		return
	}

	if len(keys) == 0 {
		h.sendMessageText(chatID, "üîë –£ –≤–∞—Å –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π.")
		return
	}

	var text strings.Builder
	text.WriteString("üîë –í–∞—à–∏ VPN-–∫–ª—é—á–∏:\n")
	for _, k := range keys {
		text.WriteString(fmt.Sprintf("–ö–ª—é—á: `%s`, –∏—Å—Ç–µ–∫–∞–µ—Ç: *%v*\n", k.Key, k.ExpiresAt.Format("02.01.2006")))
	}
	h.sendMessageMarkdown(chatID, text.String())
}

func (h *Handler) processRenewKey(chatID int64, userID int) {
	user, err := h.userService.GetUserByTelegramID(int64(userID))
	if err != nil {
		h.sendErrorMessage(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
		return
	}

	paymentURL, err := h.paymentService.CreatePayment(user.ID, 199, "–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN")
	if err != nil {
		h.sendErrorMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	h.sendMessageText(chatID, fmt.Sprintf("üîÑ –û–ø–ª–∞—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ: %s", paymentURL))
}

func (h *Handler) processKeyStatus(chatID int64, userID int) {
	keys, err := h.vpnKeyService.GetKeysByUserTelegramID(int64(userID))
	if err != nil {
		h.sendErrorMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–µ–π.")
		return
	}

	if len(keys) == 0 {
		h.sendMessageText(chatID, "üìå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö VPN-–∫–ª—é—á–µ–π.")
		return
	}

	var activeKeys []string
	for _, k := range keys {
		activeKeys = append(activeKeys, fmt.Sprintf("üîë `%s` (–ò—Å—Ç–µ–∫–∞–µ—Ç: *%v*)", k.Key, k.ExpiresAt.Format("02.01.2006")))
	}

	h.sendMessageMarkdown(chatID, "üìå –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏:\n"+strings.Join(activeKeys, "\n"))
}

func (h *Handler) sendMenuKeyboard(chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	msg.ReplyMarkup = mainMenuKeyboard()
	h.bot.Send(msg)
}

func (h *Handler) handleAddKeyCommand(chatID int64, text string) {
	// text –º–æ–∂–µ—Ç –±—ã—Ç—å "/add_key 12345-ABC-666..."
	parts := splitBySpace(text)
	if len(parts) < 2 {
		h.bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞: –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–ª—é—á. –ü—Ä–∏–º–µ—Ä: /add_key 12345"))
		return
	}
	key := parts[1]

	// –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ vpnKeyService. –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –º–µ—Ç–æ–¥ service.AddKey(...)
	// –ù–æ –∑–¥–µ—Å—å –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –¥–µ—Ä–Ω–µ–º repo –Ω–∞–ø—Ä—è–º—É—é (—Ö–æ—Ç—è –ø–æ SOLID ‚Äî –ª—É—á—à–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å).
	err := h.vpnKeyService.AddNewKey(key)
	if err != nil {
		h.bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞: "+err.Error()))
		return
	}
	h.bot.Send(tgbotapi.NewMessage(chatID, "–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω."))
}

func splitBySpace(s string) []string {
	// –∏–ª–∏ strings.Fields(s)
	// –Ω–æ Fields() —Ä–µ–∂–µ—Ç –ø–æ –≤—Å–µ–º –ø—Ä–æ–±–µ–ª–∞–º
	// –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å—Ç—Ä–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ –ø–µ—Ä–≤–æ–º—É –ø—Ä–æ–±–µ–ª—É ‚Äî –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∏–Ω–∞—á–µ
	return strings.Split(s, " ")
}

func (h *Handler) handleCallbackQuery(update tgbotapi.Update) {
	cb := update.CallbackQuery
	data := cb.Data
	chatID := cb.Message.Chat.ID

	if h.bot == nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞: bot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
		return
	}

	switch data {
	case "buy_vpn":
		user, err := h.userService.GetUserByTelegramID(cb.From.ID)
		if err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err)
			h.sendErrorMessage(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			return
		}

		// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö VPN-–∫–ª—é—á–µ–π –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π
		hasKeys, err := h.vpnKeyService.HasFreeKeys()
		if err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ VPN-–∫–ª—é—á–µ–π:", err)
			h.sendErrorMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ VPN-–∫–ª—é—á–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			return
		}
		if !hasKeys {
			log.Println("‚õî –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö VPN-–∫–ª—é—á–µ–π, –æ—Ç–º–µ–Ω—è–µ–º –æ–ø–ª–∞—Ç—É.")
			h.sendErrorMessage(chatID, "‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö VPN-–∫–ª—é—á–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			return
		}

		// ‚úÖ –ï—Å–ª–∏ –∫–ª—é—á–∏ –µ—Å—Ç—å ‚Äî —Å–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
		confirmationURL, err := h.paymentService.CreatePayment(user.ID, 299, "–ü–æ–∫—É–ø–∫–∞ VPN")
		if err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:", err)
			h.sendErrorMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			return
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
		h.sendMessageText(chatID, fmt.Sprintf("üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: %s", confirmationURL))

	case "my_keys":
		keys, err := h.vpnKeyService.GetKeysByUserTelegramID(cb.From.ID)
		if err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π:", err)
			h.sendErrorMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–µ–π.")
			return
		}

		if len(keys) == 0 {
			h.sendMessageText(chatID, "üîë –£ –≤–∞—Å –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π.")
			return
		}

		var text strings.Builder
		text.WriteString("üîë –í–∞—à–∏ VPN-–∫–ª—é—á–∏:\n")
		for _, k := range keys {
			text.WriteString(fmt.Sprintf("–ö–ª—é—á: `%s`, –∏—Å—Ç–µ–∫–∞–µ—Ç: *%v*\n", k.Key, k.ExpiresAt.Format("02.01.2006")))
		}
		h.sendMessageMarkdown(chatID, text.String())

	case "renew_key":
		user, err := h.userService.GetUserByTelegramID(cb.From.ID)
		if err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err)
			h.sendErrorMessage(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
			return
		}

		confirmationURL, err := h.paymentService.CreatePayment(user.ID, 199, "–ü—Ä–æ–¥–ª–µ–Ω–∏–µ VPN")
		if err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:", err)
			h.sendErrorMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			return
		}

		h.sendMessageText(chatID, fmt.Sprintf("üîÑ –û–ø–ª–∞—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ: %s", confirmationURL))

	case "status_key":
		keys, err := h.vpnKeyService.GetKeysByUserTelegramID(cb.From.ID)
		if err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π:", err)
			h.sendErrorMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–µ–π.")
			return
		}

		if len(keys) == 0 {
			h.sendMessageText(chatID, "üìå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö VPN-–∫–ª—é—á–µ–π.")
			return
		}

		var activeKeys []string
		for _, k := range keys {
			activeKeys = append(activeKeys, fmt.Sprintf("üîë `%s` (–ò—Å—Ç–µ–∫–∞–µ—Ç: *%v*)", k.Key, k.ExpiresAt.Format("02.01.2006")))
		}

		h.sendMessageMarkdown(chatID, "üìå –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏:\n"+strings.Join(activeKeys, "\n"))

	default:
		h.sendMessageText(chatID, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
	}

	// ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback
	callback := tgbotapi.NewCallback(cb.ID, "")
	h.bot.Request(callback)
}

func mainMenuKeyboard() tgbotapi.ReplyKeyboardMarkup {
	buttons := [][]tgbotapi.KeyboardButton{
		{tgbotapi.NewKeyboardButton("–ö—É–ø–∏—Ç—å VPN")},
		{tgbotapi.NewKeyboardButton("–ú–æ–∏ –∫–ª—é—á–∏")},
		{tgbotapi.NewKeyboardButton("–ü—Ä–æ–¥–ª–∏—Ç—å –∫–ª—é—á")},
		{tgbotapi.NewKeyboardButton("–°—Ç–∞—Ç—É—Å –∫–ª—é—á–∞")},
	}

	return tgbotapi.ReplyKeyboardMarkup{
		Keyboard:        buttons,
		ResizeKeyboard:  true,  // –£–º–µ–Ω—å—à–∞–µ—Ç –∫–Ω–æ–ø–∫–∏, –¥–µ–ª–∞—è –∏—Ö —É–¥–æ–±–Ω—ã–º–∏
		OneTimeKeyboard: false, // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –∏—Å—á–µ–∑–∞–µ—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
	}
}

func (h *Handler) handleBuyVPN(callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID
	userID := callback.From.ID

	if h.bot == nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞: bot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö VPN-–∫–ª—é—á–µ–π
	hasKeys, err := h.vpnKeyService.HasFreeKeys()
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ VPN-–∫–ª—é—á–µ–π:", err)
		msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ VPN-–∫–ª—é—á–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		_, _ = h.bot.Send(msg)
		return
	}

	if !hasKeys {
		log.Println("‚õî –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö VPN-–∫–ª—é—á–µ–π, –æ—Ç–º–µ–Ω—è–µ–º –æ–ø–ª–∞—Ç—É.")
		msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö VPN-–∫–ª—é—á–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		_, _ = h.bot.Send(msg)
		return
	}

	// ‚úÖ –ï—Å–ª–∏ –∫–ª—é—á–∏ –µ—Å—Ç—å ‚Äî —Å–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
	paymentURL, err := h.paymentService.CreatePayment(
		int(userID),           // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		299.00,                // –¶–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 299 —Ä—É–±–ª–µ–π)
		"–û–ø–ª–∞—Ç–∞ VPN-–ø–æ–¥–ø–∏—Å–∫–∏", // –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
	)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:", err)
		msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		_, _ = h.bot.Send(msg)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: %s", paymentURL))
	_, err = h.bot.Send(msg)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:", err)
	}
}

func (h *Handler) sendMessageText(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	response, err := h.bot.Send(msg)

	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	} else {
		log.Printf("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ID %d", response.MessageID)
	}
}

func (h *Handler) sendMessageMarkdown(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	_, err := h.bot.Send(msg)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Markdown-—Å–æ–æ–±—â–µ–Ω–∏—è:", err)
	}
}

func (h *Handler) sendErrorMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, "‚ùå "+text)
	_, err := h.bot.Send(msg)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:", err)
	}
}
