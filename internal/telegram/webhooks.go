package telegram

import (
	"crypto/hmac"
	"crypto/sha256"
	"encoding/base64"
	"encoding/json"
	"io"
	"log"
	"net/http"
)

type YooKassaWebhook struct {
	Type   string `json:"type"`
	Event  string `json:"event"`
	Object struct {
		ID     string `json:"id"`
		Status string `json:"status"`
		Amount struct {
			Value    string `json:"value"`
			Currency string `json:"currency"`
		} `json:"amount"`
	} `json:"object"`
}

func (h *Handler) HandleYooKassaWebhook(w http.ResponseWriter, r *http.Request) {
	log.Println("üîî –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –æ—Ç YooKassa!")

	body, err := io.ReadAll(r.Body)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ–ª–∞:", err)
		http.Error(w, "Bad request", http.StatusBadRequest)
		return
	}
	defer r.Body.Close()

	for k, v := range r.Header {
		log.Printf("üìú –ó–∞–≥–æ–ª–æ–≤–æ–∫: %s = %s\n", k, v)
	}

	if r.Header.Get("X-Content-Signature") != "" {
		if !h.verifySignature(body, r.Header.Get("X-Content-Signature")) {
			log.Println("‚ùå –û—à–∏–±–∫–∞: –ø–æ–¥–ø–∏—Å—å –≤–µ–±—Ö—É–∫–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!")
			http.Error(w, "Unauthorized", http.StatusUnauthorized)
			return
		}
	}

	var webhook YooKassaWebhook
	if err := json.Unmarshal(body, &webhook); err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", err)
		http.Error(w, "Invalid JSON", http.StatusBadRequest)
		return
	}

	log.Printf("üì© –í–µ–±—Ö—É–∫: %s, ID –ø–ª–∞—Ç–µ–∂–∞: %s, —Å—Ç–∞—Ç—É—Å: %s, —Å—É–º–º–∞: %s %s",
		webhook.Event, webhook.Object.ID, webhook.Object.Status, webhook.Object.Amount.Value, webhook.Object.Amount.Currency)

	switch webhook.Event {
	case "payment.succeeded":
		err = h.paymentService.ConfirmPayment(webhook.Object.ID)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:", err)
		} else {
			log.Println("‚úÖ –ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, VPN-–∫–ª—é—á –≤—ã–¥–∞–Ω.")
		}

	case "payment.waiting_for_capture":
		log.Println("‚ö†Ô∏è –ü–ª–∞—Ç—ë–∂ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (waiting_for_capture).")

	case "payment.canceled":
		log.Println("‚ùå –ü–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

	case "refund.succeeded":
		log.Println("üîÑ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω. –ù—É–∂–Ω–æ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å VPN-–∫–ª—é—á.")

	default:
		log.Println("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ:", webhook.Event)
	}

	w.WriteHeader(http.StatusOK)
	w.Write([]byte("OK"))
}

func (h *Handler) verifySignature(body []byte, signature string) bool {
	mac := hmac.New(sha256.New, []byte(h.secretKey))
	mac.Write(body)
	expectedMAC := mac.Sum(nil)

	receivedMAC, err := base64.StdEncoding.DecodeString(signature)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏:", err)
		return false
	}

	return hmac.Equal(expectedMAC, receivedMAC)
}
